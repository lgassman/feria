import feria.*

describe "feria" {

	//los municipios se necesitan en la segunda parte
	const sanMartin= new Municipio() //es un municipio normal
	const quilmes = new MunicipioRelajado() //es un municipio relajado
	const tigre = new MunicipioHiperRelajado()	//un municipio hiperrelajado
	
	//Remedios es una visitante de  72 tiene 500 pesos disponible. 
	//Para el punto 2: su deuda es de 700 y reside en tigre	
	const remedios = new Visitante(edad=72, municipio=tigre, dinero=500, deuda=700)
	// Manuel es un visitante de 7 años y tiene 30 pesos, 
	//Par el punto 2: no tiene deuda (es 0) y reside en quilmes
	const manuel = new Visitante(edad=7, municipio=quilmes, dinero=30, deuda =0) 
	
	//Martin es una visitante de 16 años y tiene 120 pesos .
	//Para el punto 2: tiene 80 de deuda y reside en San martin
	const martin = new Visitante(edad=16 ,municipio=sanMartin, dinero=120, deuda=80)	
	
	const arte = new PuestoInfantil(municipio=sanMartin) //Un puesto infantil, para la segunda parte su municipio es San Martin
	const dardos = new PuestoComercial(costo=50, municipio=sanMartin) //un puesto comercial de costo 50, para la segunda parte el municipio es San Martín

	const feriaAzurduy = new Feria(puestos=#{arte, dardos }) // una feria con los puetos de arte y dardos 
	
	const puestoTigre = new Impositivo(municipio=tigre)//un puesto impositivo de tigre 
	const puestoSanMartin = new Impositivo(municipio=sanMartin)//un puesto impositivo de san Martin
	const puestoQuilmes = new Impositivo(municipio=quilmes) //un puesto impositivo de quilmes
	
	
	test "1.1.a se puede visitar?" {
		assert.notThat(arte.puedeUsar(remedios)) //asegurarse que arte NO puede ser usado por remedios
		assert.that(arte.puedeUsar(manuel)) //asegurarse que arte puede ser usado por manuel
		assert.that(arte.puedeUsar(martin)) //asegurarse que arte puede ser usado por manuel
		
		assert.that(dardos.puedeUsar(remedios)) //asegurarse que dardos puede ser usado por remedios
		assert.notThat(dardos.puedeUsar(manuel)) //asegurarse que dardos NO puede ser usado por manuel
		assert.that(dardos.puedeUsar(martin)) //asegurarse que dardos puede ser usado por martin
		
	}
		
	
	test "1.1.b saber puestos visitables" {
		//asegurarse que dardos es el unico puesto que puede usar remedios en la feria azurduy
		//asegurarse que arte es el unico puesto que puede usar maniuel en la feria azurduy
		//asegurarse que dardos y artes son los puestos que puede martin en la feria azurduy
		assert.equals( #{dardos}, feriaAzurduy.visitables(remedios)) 
		assert.equals( #{arte}, feriaAzurduy.visitables(manuel))
		assert.equals( #{arte, dardos}, feriaAzurduy.visitables(martin))
	}
	
	
	test "1.2.a efectos de usar" {
		//- hacer que el puesto de dardos sea usado por remedios. 
		//- el puesto de arte NO debe poder ser usado por remedios
		//- el puesto de dardos NO debe poder ser usado por manuel 
		//- hacer que el puesto de arte sea usado por manuel 
		//- hacer que el puesto de dardos sea usado por martin. 
		//- hacer que el puesto de arte sea usado por martin
		//
		//Luego de estas acciones comprobar que:
		//- El dinero de remedios es 450
		//- El dinero de manuel es  40
		//- El dinero de martín es 80
		//-el puesto de arte fue usado  por martin y manuel
		//-el puesto de dardos due usados por remedios y martin

		dardos.usar(remedios)
		assert.throwsException({arte.usar(remedios)})

		assert.throwsException({dardos.usar(manuel)})
		arte.usar(manuel)
		
		
		dardos.usar(martin)
		arte.usar(martin)
		
		assert.equals(450, remedios.dinero())
		assert.equals(40, manuel.dinero())
		assert.equals(80, martin.dinero())
		
		
		assert.equals(#{martin, manuel}, arte.visitantes())
		assert.equals(#{martin, remedios}, dardos.visitantes())
		
	}
	
	test "1.2.b saber si se usó o no la feria" {
	//- hacer que el puesto de dardos sea usado por remedios. 
	//- hacer que el puesto de dardos sea usado por manuel (NO SE PUEDE!)
	//- revisar que remedios usó la feria azurduy
	//- revisar que manuel NO usó la feria azurduy
	//- revisar que martin NO uso la feria azurduy
		dardos.usar(remedios)
		assert.throwsException({dardos.usar(manuel)})
	
	
		assert.that(feriaAzurduy.uso(remedios))
		assert.notThat(feriaAzurduy.uso(manuel))
		assert.notThat(feriaAzurduy.uso(martin))

 	
 	}
 	
 	test "2.1 monto exigible y puestos municipales visitables" {
 		
 		//verificar que 80 es el monto que san martin le exige a martin
 		//verificar que puestoSanMartin puede ser usado por martin
 		//verificar que puestoSanTigre NO puede ser usado por martin
 		//verificar que puestoSanQuilmes NO puede ser usado por martin
 		
 		assert.equals(80, sanMartin.montoExigible(martin))
 		assert.that(puestoSanMartin.puedeUsar(martin))
 		assert.notThat(puestoTigre.puedeUsar(martin))
 		assert.notThat(puestoQuilmes.puedeUsar(martin))

 		//verificar que 0 es el monto que quilmes le exige a manuel
 		//verificar que puestoSanMartin NO puede ser usado por manuel
 		
 		assert.equals(0, quilmes.montoExigible(manuel))
 		assert.notThat(puestoSanMartin.puedeUsar(manuel))
 		assert.notThat(puestoTigre.puedeUsar(manuel))
 		assert.notThat(puestoQuilmes.puedeUsar(manuel))
 		
 		//verificar que 320 es el monto que tigre le exige a remedios
 		//verificar que puestoTigre puede ser usado por remedios

 		assert.equals(320, tigre.montoExigible(remedios))
 		assert.that(puestoTigre.puedeUsar(remedios))
 		assert.notThat(puestoSanMartin.puedeUsar(remedios))
 		assert.notThat(puestoQuilmes.puedeUsar(remedios))
 		
 		//hacer que remedios resida en san martin
 		//verificar que 700 es el monto que san martin le exige a remedios
 		//verificar que puestoSanMartin NO puede ser usado por remedios
 		
 		remedios.municipio(sanMartin)
 		assert.equals(700, sanMartin.montoExigible(remedios))
 		assert.notThat(puestoSanMartin.puedeUsar(remedios))
 		
 		//hacer que remedios resida en san quilmes
 		//verificar que 500 es el monto que quilmes le exige a remedios
 		//verificar que puestoQuilmes puede ser usado por remedios

 		remedios.municipio(quilmes)
 		assert.equals(500, quilmes.montoExigible(remedios))
 		assert.that(puestoQuilmes.puedeUsar(remedios))

 		//hacer que remedios tenga 80 años
 		//verificar que 450 es el monto que quilmes le exige a remedios
 		//verificar que puestoQuilmes puede ser usado por remedios
 		remedios.edad(80)
 		assert.equals(450, quilmes.montoExigible(remedios))
 		assert.that(puestoQuilmes.puedeUsar(remedios))
 		
 	}
 	
 	test "2.2 usar puestos impositivos y consultas de municipio" {
// agregar puestoTigre a la feriaAzurduy
// agregar puestoSanMartin a la feriaAzurduy

// const juana= //una visitante que reside en San Martín, tiene 20 años, 1000 pesos y una deuda de 300. 

// hacer que el puesto impositivo de Tigre sea usado por Remedios.
// hacer que el puesto impositivo de San Martín sea usado por Juana. 
// hacer que el puesto impositivo de San Martín sea usado por Martín.
//
//Verificar que:
//- Martín no tiene mas deuda 
//- Martin tiene 40 de dinero.
//- Juana no tiene más deuda 
//- Juana le queda 700 de dinero.
//- Remedios tiene 380 de deuda 
//- Remedios tiene 180 de dinero.
//- Tigre recaudó 320.
//- San Martín recaudó 380.
//- Tigre apadrina 1 puesto de la feria Azurduy.
//- San Martín apadrina 3 puestos de la feria Azurduy.
//- Quilmes no apadrina a nadie en la feria Azurduy.
//- Los municipios apadrinantes de la feria Azurduy son Tigre y San Martín.
//- El promedio de racaudación de la feria Azurduy es 350.
//- El municipio que menos recaudó en la feria es Tigre.

 		feriaAzurduy.agregar(puestoTigre)
 		feriaAzurduy.agregar(puestoSanMartin)
 		const juana = new Visitante(edad=20, municipio=sanMartin, dinero=1000, deuda=300)
 		puestoTigre.usar(remedios)
 		puestoSanMartin.usar(juana)
 		puestoSanMartin.usar(martin)
 		assert.equals(0, martin.deuda())
 		assert.equals(40, martin.dinero())
 		assert.equals(0,juana.deuda())
 		assert.equals(700, juana.dinero())
 		assert.equals(380,remedios.deuda())
 		assert.equals(180, remedios.dinero())
 		assert.equals(320, tigre.recaudacion())
 		assert.equals(380, sanMartin.recaudacion())
 		assert.equals(1, feriaAzurduy.cuantosApadrina(tigre))
 		assert.equals(3, feriaAzurduy.cuantosApadrina(sanMartin))
 		assert.equals(0, feriaAzurduy.cuantosApadrina(quilmes))
 		assert.equals(#{tigre, sanMartin}, feriaAzurduy.municipios())
 		assert.equals(350, feriaAzurduy.promedioRecaudacion())
 		assert.equals(tigre, feriaAzurduy.menosRecaudador())
 		
 	}

	
}